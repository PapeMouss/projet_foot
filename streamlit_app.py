import streamlit as st
import pandas as pd
import numpy as np
import psycopg2
import matplotlib.pyplot as plt

# Configuration de la page
st.set_page_config(
    page_title="BEST LINEUP üèüÔ∏è Ô∏è",
    page_icon="‚öΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ajouter une option de mode sombre
mode_sombre = st.sidebar.checkbox("Mode Sombre")

# Appliquer le mode sombre si activ√©
if mode_sombre:
    st.markdown(
        """
        <style>
        body {
            color: #000000;
            background-color: #121212;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# Ajouter un lien vers le fichier CSS dans la balise head
st.markdown(
    """
    <head>
        <link rel="stylesheet" type="text/css" href="style.css">
    </head>
    """,
    unsafe_allow_html=True
)

# connection (db) et ex√©cution des requ√™tes SQL et r√©cup√©ration des r√©sultats en DataFrame
def run_query_select(query):
    conn = psycopg2.connect(
        dbname="foot_systeme_db",
        user="moussamar",
        host="localhost",
        port="5432"
    )
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# ex√©cution des requ√™tes SQL sans r√©cup√©ration de r√©sultats
def run_query(query):
    conn = psycopg2.connect(
        dbname="foot_systeme_db",
        user="moussamar",
        host="localhost",
        port="5432"
    )
    cursor = conn.cursor()
    cursor.execute(query)
    conn.commit()
    conn.close()

# Calcul des performances des √©quipes avec chaque sch√©ma tactique pendant la p√©riode s√©lectionn√©e
def calculate_team_performance(period_start, period_end, df_tactique):
    # Code pour calculer les performances des √©quipes avec chaque tactique
    pass

# Partie pour afficher le meilleur syst√®me/la meilleure p√©riode
def get_best_formation():
    st.subheader('S√©lectionner une P√©riode de Temps')
    date_debut = st.date_input('Date de D√©but')
    date_fin = st.date_input('Date de Fin')

    if st.button('Calculer le Syst√®me de Jeu Recommand√©'):
        if date_debut > date_fin:
            st.error('La date de fin doit √™tre post√©rieure √† la date de d√©but.')
        else:
            df_tactique = run_query_select('SELECT * FROM Tactique')
            # Calcul et affichage du syst√®me de jeu recommand√© pour la p√©riode s√©lectionn√©e
            recommended_formation = calculate_team_performance(date_debut, date_fin, df_tactique)
            st.subheader('Syst√®me de Jeu Recommand√© pour la P√©riode S√©lectionn√©e')
            st.write(recommended_formation)

            # Afficher un graphique radar pour visualiser les performances des tactiques
            fig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(polar=True))
            
            # Exemple de donn√©es fictives pour les performances de chaque tactique (√† remplacer par vos donn√©es r√©elles)
            tactiques = ['Tactique 1', 'Tactique 2', 'Tactique 3', 'Tactique 4', 'Tactique 5']
            performances = [4, 3, 2, 5, 4]  # Score de performance arbitraire pour chaque tactique
            
            # Angle pour chaque tactique
            angles = np.linspace(0, 2 * np.pi, len(tactiques), endpoint=False).tolist()
            
            # Cr√©er un graphique radar
            ax.fill(angles, performances, color='blue', alpha=0.25)
            ax.plot(angles, performances, color='blue', linewidth=2)
            
            # D√©finir les √©tiquettes des tactiques
            ax.set_xticks(angles)
            ax.set_xticklabels(tactiques)
            
            st.pyplot(fig)

##############################################################################################################################################################

# Partie pour afficher le syst√®me en fonction des joueurs
def get_best_formation_for_team():
    st.title('Optimisation du Syst√®me de Jeu')
    st.subheader('Saisie des Donn√©es des Joueurs')

    # Nombre total de joueurs √† afficher
    total_joueurs = 11

    # Nombre de colonnes pour afficher les champs de saisie des joueurs
    num_colonnes = 3

    # Calcul du nombre total de lignes n√©cessaire pour afficher tous les joueurs
    num_lignes = total_joueurs // num_colonnes
    if total_joueurs % num_colonnes != 0:
        num_lignes += 1

    # Cr√©ation de formulaires pour saisir les donn√©es de chaque joueur
    joueur_index = 0
    for ligne in range(num_lignes):
        columns = st.columns(num_colonnes)
        for colonne in columns:
            if joueur_index < total_joueurs:
                with colonne:
                    joueur_index += 1
                    st.write(f"Joueur {joueur_index}:")
                    nom_joueur = st.text_input(f"Nom du Joueur {joueur_index}", key=f"nom_{joueur_index}")  # Cl√© unique pour chaque texte d'entr√©e
                    poste_joueur = st.selectbox(f"Poste du Joueur {joueur_index}", ['Attaquant', 'Milieu', 'D√©fenseur', 'Gardien'], key=f"poste_{joueur_index}")  # Cl√© unique pour chaque selectbox
                    equipe_id = st.selectbox(f'√âquipe du Joueur {joueur_index}', [1, 2, 3], key=f"equipe_{joueur_index}")  # Cl√© unique pour chaque selectbox

    if st.button('Enregistrer'):
        # Insertion des donn√©es des joueurs dans la base de donn√©es
        for i in range(1, total_joueurs + 1):
            nom_joueur = st.text_input(f"Nom du Joueur {i}", key=f"nom_{i}")
            poste_joueur = st.selectbox(f"Poste du Joueur {i}", ['Attaquant', 'Milieu', 'D√©fenseur', 'Gardien'], key=f"poste_{i}")
            equipe_id = st.selectbox(f'√âquipe du Joueur {i}', [1, 2, 3], key=f"equipe_{i}")

            query_insert = f"INSERT INTO Joueur (nom, poste, equipe_id) VALUES ('{nom_joueur}', '{poste_joueur}', {equipe_id})"
            run_query(query_insert)
        
        st.success('Donn√©es des joueurs enregistr√©es avec succ√®s.')

        # Bouton pour obtenir le syst√®me de jeu recommand√©
        if st.button('Afficher le Syst√®me de Jeu Recommand√©'):
            # R√©cup√©rer les donn√©es des joueurs enregistr√©es dans la base de donn√©es
            query_joueur = 'SELECT * FROM Joueur'
            df_joueur = run_query_select(query_joueur)
            # Calculer le syst√®me de jeu recommand√© et l'afficher
            recommended_formation = calculate_team_performance(df_joueur)
            st.subheader('Syst√®me de Jeu Recommand√©')
            st.write(recommended_formation)

    # Affichage des donn√©es des joueurs
    st.subheader('Donn√©es des Joueurs')
    query_joueur = 'SELECT * FROM Joueur'
    df_joueur = run_query_select(query_joueur)
    st.write(df_joueur)

    with st.expander('Affiner la recherche'):
        # Filtre des joueurs par √©quipes ou par positions
        team_filter = st.multiselect('√âquipes', sorted([str(i) for i in set(df_joueur['equipe_id'])]))
        position_filter = st.multiselect('Positions', ['Attaquant', 'Milieu', 'D√©fenseur', 'Gardien'])

# Affichage du contenu en fonction de l'option s√©lectionn√©e par l'utilisateur
option = st.sidebar.radio('Choisir une option', ['Le Meilleur Syst√®me/P√©riode', 'Le Syst√®me en fonction des joueurs'])
if option == 'Le Meilleur Syst√®me/P√©riode':
    get_best_formation()
else:
    get_best_formation_for_team()

# Ajout d'une s√©paration
st.markdown("---")

# Pied de page avec les informations de contact
st.markdown(
    """
    ---\n
    Contactez-nous : marmoussa24@gmail.com\n
    Suivez-nous sur Twitter : [BesttLineUp](https://twitter.com/Syst√®meFootball)
    """
)
